# /etc/bash/bashrc
# vim:ft=sh:fdm=marker:fdl=0:fen:
# Шелл {{{
    # Test for an interactive shell.  There is no need to set anything
    if [[ $- != *i* ]] ; then
        # Shell is non-interactive.  Be done now!
        return
    fi

    shopt -s checkwinsize
    shopt -s histappend
    shopt -s cmdhist
    shopt -s cdspell
    shopt -s cdable_vars 
    shopt -s checkhash
    shopt -s extglob
    shopt -s histreedit
    shopt -s histverify
    shopt -s no_empty_cmd_completion
    PROMPT_COMMAND='history -a'

    if [ -r /etc/bash_completion ]; then
        . /etc/bash_completion
    else
        complete -A shopt shopt
        complete -A helptopic help
        complete -a unalias
        complete -A binding bind
        complete -d cd
        complete -c command exec type man info which
    fi
# }}}
# Переменные окружения {{{
    export LANG="ru_RU.UTF-8"
    export LC_TIME="C"
    export EDITOR="vim"
    #export PAGER="vimpager"
    export PAGER="less"
    export PATH=/opt/android-sdk-linux/platform-tools:$HOME/bin:$PATH:/usr/bin/core_perl
    export CDPATH=~:.:./export/home/vm/:/deby:/mnt:/root:/home/oko:/home/oko/mnt

    export HISTCONTROL="erasedups"
    export HISTFILESIZE=500000
    export HISTSIZE=100000
    export HISTFILE=~/.bash_history
    export HISTIGNORE="[   ]*:[bf]g:&:ls:pwd:exit:clear:ll:mc"
    export HISTTIMEFORMAT='%h.%d %H:%M '

    export GREP_OPTIONS='--color=auto'
    export GREP_COLOR='1;33'

    #export LESS_TERMCAP_mb=$'\E[01;31m'        # begin blinking
    #export LESS_TERMCAP_md=$'\E[01;31m'        # begin bold
    #export LESS_TERMCAP_me=$'\E[0m'            # end mode
    #export LESS_TERMCAP_se=$'\E[0m'            # end standout-mode
    #export LESS_TERMCAP_so=$'\E[01;44;33m'     # begin standout-mode - info box
    #export LESS_TERMCAP_ue=$'\E[0m'            # end underline
    #export LESS_TERMCAP_us=$'\E[01;32m'        # begin underline

    export LESS_TERMCAP_mb=$'\E[01;31m'       # begin blinking
    export LESS_TERMCAP_md=$'\E[01;38;5;74m'  # begin bold
    export LESS_TERMCAP_me=$'\E[0m'           # end mode
    export LESS_TERMCAP_se=$'\E[0m'           # end standout-mode
    export LESS_TERMCAP_so=$'\E[38;5;246m'    # begin standout-mode - info box
    export LESS_TERMCAP_ue=$'\E[0m'           # end underline
    export LESS_TERMCAP_us=$'\E[04;38;5;146m' # begin underline
# }}}
# Aliases {{{1
    # Расцвечиваем вывод команд {{{2
        alias cal="LC_TIME='ru_RU.UTF-8' cal"

        if [ -f /usr/bin/grc ]; then
            alias grca="grc --colour=auto"

            for c in ping traceroute make diff last cvs netstat ifconfig uptime vmstat iostat df mount uname ps route lsmod whereis ; do
                alias ${c}="grca ${c}"
            done

            alias ll="grca ls --color=force -F --group-directories-first -l"
            alias ccal="LC_TIME=ru_RU.UTF-8 grca cal"
            alias logc="grc cat"
            alias logt="grc tail"
            alias logh="grc head"
        else
            alias ll="ls -l"
        fi
    # }}}
    # Сокращения команд {{{2
        # GIT {{{3
            alias glc="git log -r --graph --pretty=format:'%Cred%h%Creset[%B] -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold)[%an]%Creset' --abbrev-commit --date=relative"
            alias  glg="git log --color --graph --pretty=format:'%Cred%h%Creset - %s %Cgreen(%cr) %C(bold blue)[%an]%Creset %C(yellow)%d%Creset' --abbrev-commit"
            alias glgd="git log --color --graph --pretty=format:'%Cred%h%Creset - %s %Cgreen(%ci) %C(bold blue)[%an]%Creset %C(yellow)%d%Creset' --abbrev-commit"
            alias gl="git log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short"
            alias gls="git log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short -n 10"
            alias gg='git graph'
            alias gln='glg -n10'
            alias glnd='glgd -n10'
            alias gs='git status '
            alias ga='git add '
            alias gb='git branch '
            alias gc='git commit'
            alias gd='git diff'
            alias go='git checkout '
            alias gu='git reset HEAD -- '
            alias got='git '
            alias gh='git log --pretty=format:"%h %ad | %s%d [%an]" --graph --date=short'
        # }}}
        alias ..="cd .."
        alias ...="cd ../.."
        alias ....="cd ../../.."
        alias ntup="sudo /usr/bin/ntpdate time-a.nist.govs"
        alias adbi="adb install"
        alias adbis="adb install -s"
        alias adbcp="adb push"
        alias adbsh="adb shell"
        alias adbrb="adb reboot"
        alias rcd="daemon"
        alias lll="ll -ah"
        alias lla="ll -a"
        alias llh="ll -h"
        alias lsa='ls -lur'         # atime
        alias lsd='ls -ltr'         # mtime
        alias lst='ls -lcr'         # ctime
        alias lsz='ls -lSr'         # size
        alias lse='ls -lXB'         # alphabetically
        alias lsh='ls -Al'          # all
        alias lsg='ls | grep -i'    # grep
        alias lsm='ls -al | $PAGER' # page through
        alias lsr='ls -lR'          # list recursively
        alias y='sudo aptitude'
        alias yi='sudo aptitude install'
        alias ys='sudo aptitude search'
        alias yr='sudo aptitude purge'
        alias ysy='sudo aptitude update'
        alias ysu='sudo aptitude upgrade'
        alias m='mplayer'
        alias ipt="iptables"
        alias iptsave="iptables-save > ~/iptables_`date +%d.%m.%y`"
        alias il="iptables -vnL"
        alias iln="iptables -t nat -vnL"
        alias ilm="iptables -t mangle -vnL"
        alias ili="iptables -vnL INPUT"
        alias ilo="iptables -vnL OUTPUT"
        alias ilf="iptables -vnL FORWARD"
        alias scr="screen -DR"
        alias G="grep"
        alias M="most"
        alias T="tail"
        alias Tf="tail -n 30 -f"
        alias cpp="rsync --progress"
        alias cx='chmod +x'
        alias ssu="sudo -i"
        alias hg='history | grep'
        alias df='df -h --sync'
        alias f='find | grep'
        alias so='source ~/.bashrc'
        alias xp='xprop | grep "WM_WINDOW_ROLE\|WM_CLASS" && echo "WM_CLASS(STRING) = \"NAME\", \"CLASS\""'
        alias gr='grep -ir'
    # }}}
# }}}
# prompt {{{
    # Set colorful PS1 only on colorful terminals.
    # dircolors --print-database uses its own built-in database
    # instead of using /etc/DIR_COLORS.  Try to use the external file
    # first to take advantage of user additions.
    source ~/.dotfiles/git-prompt.sh
    use_color=false
    safe_term=${TERM//[^[:alnum:]]/.}	# sanitize TERM

    if [[ -f /etc/DIR_COLORS ]] ; then
        grep -q "^TERM ${safe_term}" /etc/DIR_COLORS && use_color=true
    elif type -p dircolors >/dev/null ; then
        if dircolors --print-database | grep -q "^TERM ${safe_term}" ; then
            use_color=true
        fi
    fi

    if ${use_color} ; then
        if [[ ${EUID} == 0 ]] ; then
            PS1='\[\033[01;31m\]\h\[\033[01;34m\] \W \$\[\033[00m\] '
        else
            GIT_PS1_SHOWCOLORHINTS=1
            PS1='\[\033[01;32m\]\u@\h\[\033[01;34m\] \W $(__git_ps1 "(%s)")\$\[\033[00m\] '
        fi

        alias ls='ls --color=auto'
    else
        if [[ ${EUID} == 0 ]] ; then
            # show root@ when we don't have colors
            PS1='\u@\h \W \$ '
        else
            PS1='\u@\h \w \$ '
        fi
    fi
    unset use_color safe_term
# }}}
# Функции {{{
    # {{{ cd_func 
    cd_func ()
    {
        local x2 the_new_dir adir index
        local -i cnt

        if [[ $1 ==  "--" ]]; then
            dirs -v
            return 0
        fi

        the_new_dir=$1
        [[ -z $1 ]] && the_new_dir=$HOME

        if [[ ${the_new_dir:0:1} == '-' ]]; then
            #
            # Extract dir N from dirs
            index=${the_new_dir:1}
            [[ -z $index ]] && index=1
            adir=$(dirs +$index)
            [[ -z $adir ]] && return 1
            the_new_dir=$adir
        fi

        #
        # '~' has to be substituted by ${HOME}
        [[ ${the_new_dir:0:1} == '~' ]] && the_new_dir="${HOME}${the_new_dir:1}"

        #
        # Now change to the new dir and add to the top of the stack
        pushd "${the_new_dir}" > /dev/null
        [[ $? -ne 0 ]] && return 1
        the_new_dir=$(pwd)

        #
        # Trim down everything beyond 11th entry
        popd -n +11 2>/dev/null 1>/dev/null

        #
        # Remove any other occurence of this dir, skipping the top of the stack
        for ((cnt=1; cnt <= 10; cnt++)); do
            x2=$(dirs +${cnt} 2>/dev/null)
            [[ $? -ne 0 ]] && return 0
            [[ ${x2:0:1} == '~' ]] && x2="${HOME}${x2:1}"
            if [[ "${x2}" == "${the_new_dir}" ]]; then
                popd -n +$cnt 2>/dev/null 1>/dev/null
                cnt=cnt-1
            fi
        done

        return 0
    }

    alias cd=cd_func
    # }}}
    # {{{ extract
    extract () {
            if [ -f $1 ] ; then 
                case $1 in
                 *.tar.bz2)   tar xjf $1 ;;
                 *.tar.gz)    tar xzf $1 ;;
                 *.bz2)       bunzip2 $1 ;;
                 *.rar)       unrar e $1 ;;
                 *.gz)        gunzip $1  ;;
                 *.tar)       tar xf $1  ;;
                 *.tbz2)      tar xjf $1 ;;
                 *.tgz)       tar xzf $1 ;;
                 *.zip)       unzip $1   ;;
                 *.Z)         uncompress $1  ;;
                 *.7z)        7z x $1    ;;
                 *)           echo "'$1' cannot be extracted via extract()" ;;
             esac
         else
             echo "'$1' is not a valid file"
         fi
    }
    # }}}
    # {{{ compress
    compress () {
        FILE=$1
        case $FILE in
            *.tar.bz2) shift && tar cjf $FILE $* ;;
            *.tar.gz) shift && tar czf $FILE $* ;;
            *.tgz) shift && tar czf $FILE $* ;;
            *.zip) shift && zip $FILE $* ;;
            *.rar) shift && rar $FILE $* ;;
        esac
    }
    # }}}
    # {{{ gvim server 
    gvimsrv () {
        VIM_SERVER=$(vim --serverlist | head -n 1)
        VIM="/usr/bin/gvim"

        if [ ! -n $VIM_SERVER ]
        then
            $VIM --servername oko-vim 
        fi

        $VIM --servername oko-vim --remote-tab-silent "$@"
    }
    alias gvim=gvimsrv
    # }}}
    # {{{ one-liners
        function calc  { echo "${1}"|bc -l; }
        function sds   { sdcv -u en-ru-bars $1 | grep -v -e '-->'; }
        function sdm   { sdcv -u mueller $1 | grep -v -e '-->'; }
        function drill { cat ~/.ssh/id_rsa.pub | ssh $* "mkdir -p -m700 ~/.ssh/; cat - >> ~/.ssh/authorized_keys"; }
        function cmdfu { curl "http://www.commandlinefu.com/commands/matching/$@/$(echo -n $@ | openssl base64)/plaintext"; }
        function rtail { tail -f $1 | perl -pe 's/'$2'/\e[1;31;43m$&\e[0m/g'; }
        function ssmount { test -d ~/mnt/$1 || mkdir -p ~/mnt/$1; sshfs $1:/ ~/mnt/$1; }
        function mp3tags { find . -iname "*.mp3" -type f -print0 | xargs -0 mid3iconv -d -e CP1251 --remove-v1; }
        function dumpaudio { mplayer -vc null -vo null -nocorrect-pts -ao pcm:waveheader ${1}; }
    # }}}
# }}}
